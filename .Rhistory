w_list[,1:5] <- 0
v1_list <- w_list
for (round in 1:2000) {
set.seed(sample(1:10000, 1))
# n round updates
n = 0
# xi
i = 1
# w(weight): 起始值(-1, 0, 0, 0, 0)
w <- x[1,]
v <- as.matrix(x) %*% t(w)
# train
for (pUpdate in 1:50) {
v <- as.matrix(x) %*% t(w)
row_diff_sign <- which( v * Y < 0 )
# 在v裡面隨機找一個錯誤的點i (sign是負的)
i <- sample(row_diff_sign, 1)
w1 <- w + Y[i] * x[i,]
v1 <- as.matrix(x) %*% t(w1)
row_diff_sign1 <- which( (v1 * Y) < 0 )
#        w_list[pUpdate,] <- w1
# 如果w1比w好（正負相異的點少），就更新
if (length(row_diff_sign1) < length(row_diff_sign)) {
w <- w1
}
}
# test
error_rate <- sum(as.matrix(x_te) %*% t(w1) * Y_te < 0 ) / l
# record the error rate
ErR[round] <- error_rate
}
hist(ErR)
summary(ErR)
library(ggplot2)
library(caret) # func: preProcess
library(kernlab)
library(splines) # func: bs (fit with curvy line)
library(rattle) # func: fancyRpartPlot
library(rpart.plot) # func: fancyRpartPlot
library(caret)
library(randomForest)
library(rpart)
library(rattle)
tr <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
train_raw <- train_raw[, c(2:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
train_raw <- tr[, c(2:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
M <- abs(cor(train_raw[7:58]))
diag(M) <- 0
dim(which(M > 0.9, arr.ind = T))
preProc <- preProcess(train_raw[,7:58], method="pca", pcaComp = 10)
preProc
preProc$PC1
trainPC <- predict(preProc, train_raw[7:58])
View(trainPC)
View(train_raw)
modelFit <- train(train_raw$classe ~., method="glm", data = trainPC)
warnings()
modelFit <- train(train_raw$classe ~., method="lm", data = trainPC)
modelFit <- train(train_raw$classe ~., method="rf", data = trainPC)
modelFit <- train(train_raw$classe~., method="rpart", data = trainPC)
library(caret)
library(randomForest)
library(rpart)
library(rattle)
tr <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
train_nw <- tr[, -c(1, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
rm(train_nw)
train_raw <- tr[, c(2:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
preProc <- preProcess(train_raw[,7:58], method="pca", pcaComp = 10)
?predict
trainPC <- predict(preProc, train_raw$classe)
plot(train_raw$roll_belt, col="train_raw$num_window")
plot(train_raw$roll_belt, col="train_raw$new_window")
plot(train_raw$roll_belt, col= train_raw$new_window)
plot(subset(train_raw$roll_belt, train_raw$classe=="A"), col= train_raw$new_window)
plot(subset(train_raw$roll_belt, train_raw$classe=="A"), col= train_raw$new_window, type="l")
plot(subset(train_raw$roll_belt, train_raw$classe=="A"), col= train_raw$new_window)
plot(subset(train_raw$roll_belt, train_raw$classe=="A" & train_raw$user_name =="carlitos"), col= train_raw$new_window)
?pch
plot(subset(train_raw$roll_belt, train_raw$classe=="A" & train_raw$user_name =="carlitos"), col= train_raw$new_window, pch = 16)
library(ggplot2)
library(caret) # func: preProcess
library(kernlab)
library(splines) # func: bs (fit with curvy line)
library(rattle) # func: fancyRpartPlot
library(rpart.plot) # func: fancyRpartPlot
sample_data <- read.csv("sampleSubmission.csv")
train_data <- read.csv("train.csv")
test_data <- read.csv("test.csv")
sample_data <- read.csv("sampleSubmission.csv")
train_data <- read.csv("train.csv")
test_data <- read.csv("test.csv")
setwd("D:/Data Analysis/Bike Sharing")
sample_data <- read.csv("sampleSubmission.csv")
train_data <- read.csv("train.csv")
test_data <- read.csv("test.csv")
View(sample_data)
View(test_data)
View(train_data)
View(train_data)
summary(train_data$datetime)
str(train_data$datetime)
class(train_data$datetime)
sum(train_data$datetime == 2011-01-01)
?as.date
?date
?as.Date
with(subset(train_data, datetime<2011-01-01 ),qplot(datetime, count))
train_data$datetime <- as.Date(train_data$datetime, "%Y-%m-%d %H:%M:%S")
train_data$weekdays <- format(train_data$datetime, "%w")
View(train_data)
aggregate(count, by=list(holiday, workingday), )
aggregate(train_data$count, by=list(train_data$holiday, train_data$workingday), )
featurePlot(x=train_data[, 2:6],
y=train_data[,12],
plot="paris")
featurePlot(x=train_data[, c("temp", "humidity", "windspeed")],
y=train_data$count,
plot="pairs")
plot(train_data$count)
barplot(train_data$date, train_data$count)
barplot(train_data$count, train_data$date)
barplot(train_data$count, train_data$datetime)
barplot(train_data$datetime, train_data$count)
?barplot
?hist
?barplot
plot(train_data$count, train_data$datetime)
plot(train_data$datetime, train_data$count)
plot(train_data$datetime, train_data$count, col=train_data$workingday)
?ts
ts1 <- ts(train_data$datetime, frequency = 24)
plot(ts1, train_data$count, col=train_data$workingday)
ts1 <- ts(train_data[, c(datetime, count), frequency = 24)
ts1 <- ts(train_data[, c(datetime, count], frequency = 24)
ts1 <- ts(train_data[, c(datetime, count)], frequency = 24)
View(train_data)
head(train_data$datetime)
train_data <- read.csv("train.csv")
train_data$datetime <- as.Date(train_data$datetime, "%Y-%m-%d %H:%M:%S")
ts1 <- ts(train_data[, c(datetime, count)], frequency = 24)
View(train_data)
tr <- read.csv("train.csv")
rm(train_data)
as.Date(tr$datetime, "%Y-%m-%d %H:%M:%S")
as.Date(tr$datetime[1], "%Y-%m-%d %H:%M:%S")
View(tr)
as.Date(tr$datetime[1], format = "%Y-%m-%d %H:%M:%S")
?as.Date
?as.Datetime
?datetime
as.Date(tr$datetime[1], format = "%H:%M:%S")
as.Date(tr$datetime[1], format = "%Y-%m-%d %H:%M:%S")
?as.time
?as.Time
?time
?striptime
?strptime
strptime(tr$datetime[1], format = "%Y-%m-%d %H:%M:%S")
View(tr)
strptime(tr$datetime[1], "%Y-%m-%d %H:%M:%S")
?Date
dates <- c("02/27/92", "02/27/92", "01/14/92", "02/28/92", "02/01/92")
times <- c("23:03:20", "22:29:56", "01:03:30", "18:21:03", "16:56:26")
x <- paste(dates, times)
strptime(x, "%m/%d/%y %H:%M:%S")
strptime(x, "%m/%d/%y %H:%M:%S")
strptime(tr$datetime[1], "%Y-%m-%d %H:%M:%S")
strptime(tr$datetime[1], "%H:%M:%S")
class(tr$datetime[1])
sys.time
Sys.time
Sys.time()
Sys.Date()
strptime(tr$datetime[1], "%Y-%m-%d %H")
system.time
proc.time9
proc.time()
train_data$datetime <- strptime(train_data$datetime, "%Y-%m-%d %H:%M:%S", tz="")
train_data$datetime <- strptime(tr$datetime, "%Y-%m-%d %H:%M:%S", tz="")
strptime(tr$datetime[1], "%Y-%m-%d %H:%M:%S", tz="")
strptime(tr$datetime[1])
strptime(tr$datetime[1], "%Y-%m-%d %H:%M:%S", usetz=F)
strptime(tr$datetime[1], "%Y-%m-%d %H:%M:%S", usetz=T)
strptime(tr$datetime[1], "%Y-%m-%d %H:%M:%S", usetz=False)
strftime(tr$datetime[1], "%Y-%m-%d %H:%M:%S", usetz=False)
strftime(tr$datetime[1], "%Y-%m-%d %H:%M:%S", usetz=F)
tr$datetime <- strftime(tr$datetime, "%Y-%m-%d %H:%M:%S", usetz=F)
View(tr)
rm(dates)
rm(times)
rm(x)
with(subset(train_data, datetime<2011-01-02 ),qplot(datetime, count))
with(subset(tr, datetime<2011-01-02 ),qplot(datetime, count))
as.Date(2011-01-02)
as.Date(2011-01-02, "%Y-%m-%d")
as.Date("2011-01-02", "%Y-%m-%d")
with(subset(tr, datetime < as.Date("2011-01-02", "%Y-%m-%d") ),qplot(datetime, count))
tr$weekdays <- format(tr$datetime, "%w")
View(tr)
format(tr$datetime[1], "%w")
tr$datetime[1], "%w"
tr$datetime[1]
tr <- read.csv("train.csv")
tr$weekdays <- format(tr$datetime, "%w")
tr$date <- as.Date(tr$datetime, "%Y-%m-%d %H:%M:%S")
tr$weekdays <- format(tr$datetime, "%w")
tr$weekdays <- format(tr$date, "%w")
tr$datetime <- strftime(tr$datetime, "%Y-%m-%d %H:%M:%S", usetz=F)
View(tr)
?aggregate
format(tr$datetime, "%M")
?format
View(tr)
?strftime
format(tr$datetime, "%Y-%m-%d %H:%M:%S")
format(tr$datetime[1], "%Y-%m-%d %H:%M:%S")
tr <- read.csv("train.csv")
tr$datetime[1]
tr$datetime[1]+1
as.Ddate(tr$datetime[1])
as.Date(tr$datetime[1])
date()
strftime("21:11:45", "%H:%M:%S")
strftime("21:11:45", "%H:%M:%S", usetz=F)
strftime(tr$datetime[1], "%Y-%m-%d %H:%M:%S", usetz=F)
s <- strftime(tr$datetime[1], "%Y-%m-%d %H:%M:%S", usetz=F)
class(s)
s <- format(tr$datetime[1], "%Y-%m-%d %H:%M:%S", usetz=F)
s <- format(tr$datetime[1], "%Y-%m-%d %H:%M:%S", usetz=F, trim=T)
s <- format(tr$datetime[1], "%Y-%m-%d %H:%M:%S", usetz=F, trim=F)
?format
as.Date(tr$datetime[1], "%Y-%m-%d %H:%M:%S")
as.Date(tr$datetime[1], "%H:%M:%S")
date(tr$datetime[1], "%Y-%m-%d %H:%M:%S")
?as.POSIXct
as.POSIXct(strptime(tr$datetime[1], "%Y-%m-%d %H:%M:%S"))
as.POSIXlt(strptime(tr$datetime[1], "%Y-%m-%d %H:%M:%S"))
s <- as.POSIXlt(strptime(tr$datetime[1], "%Y-%m-%d %H:%M:%S"))
format(s, "%M")
format(s, "%H")
tr <- read.csv("train.csv")
s <- as.POSIXct(strptime(tr$datetime[1], "%Y-%m-%d %H:%M:%S"))
format(s, "%H")
rm(s)
tr$datetime <- as.POSIXct(tr$datetime, "%Y-%m-%d %H:%M:%S")
tr$weekdays <- format(tr$datetime, "%w")
tr$Hr <- format(tr$datetime, "%H")
tr$datetime <- as.POSIXct(tr$datetime, "%Y-%m-%d %H:%M:%S", tz="")
tr$weekdays <- format(tr$datetime, "%w")
tr$weekdays <- format(tr$datetime, "%w", tz="")
tr$Hr <- format(tr$datetime, "%H", tz="")
View(tr)
tr <- read.csv("train.csv")
tr$datetime <- as.POSIXct(strptime(tr$datetime, "%Y-%m-%d %H:%M:%S"))
tr$weekdays <- format(tr$datetime, "%w")
tr$Hr <- format(tr$datetime, "%H")
View(tr)
m1 <- lm(count ~ weekdays + Hr, data = tr)
summary(m1)
with(subset(tr, datetime < as.Date("2011-01-02", "%Y-%m-%d") ),qplot(datetime, count))
with(subset(tr, datetime < as.POSIXct("2011-01-02", "%Y-%m-%d") ),qplot(datetime, count))
warnings
plot(tr$count~tr$weekdays)
plot(tr$count~tr$Hr, col=tr$weekdays)
?aggregate
with(tr, aggregate(count, by=list(Hr, workingday), mean)
with(tr, aggregate(count, by=list(Hr, workingday), mean))
plot(with(tr, aggregate(count, by=list(Hr, workingday), mean)))
plot(with(tr, aggregate(count, by=list(Hr, weekday), mean)))
plot(with(tr, aggregate(count, by=list(Hr, weekdays), mean)))
m1 <- lm(count ~ weekdays + Hr + windspeed, data = tr)
summary(m1)
m1 <- lm(count ~ weekdays + Hr, data = tr)
summary(m1)
m1 <- lm(count ~ weekdays + Hr + windspeed + humidity, data = tr)
summary(m1)
m1 <- lm(count ~ weekdays + Hr + windspeed + humidity + atemp, data = tr)
summary(m1)
train
?train
data = tr)
m1Fit <- train(count ~ weekdays + Hr + windspeed + humidity + atemp, method = "lm", data = tr)
plot(m1Fit$finalModel)
plot(m1Fit$finalModel, 1)
featurePlot(x=train_data[, c("temp", "humidity", "windspeed")],
y=train_data$count,
plot="pairs")
y=tr$count,
featurePlot(x=tr[, c("temp", "humidity", "windspeed")],
y=tr$count,
plot="pairs")
featurePlot(x=subset(tr[, c("temp", "humidity", "windspeed")], Hr == 18),
y=tr$count,
plot="pairs")
featurePlot(x=subset(tr[, c("temp", "humidity", "windspeed")], tr$Hr == 18),
y=tr$count,
plot="pairs")
featurePlot(x=subset(tr[, c("temp", "humidity", "windspeed")], tr$Hr == 18),
y=subset(tr$count, tr$Hr == 18),
plot="pairs")
plot(with(tr, aggregate(count, by=list(Hr, weekdays), mean)))
hist(with(tr, aggregate(count, by=list(Hr, weekdays), mean)))
barplot(with(tr, aggregate(count, by=list(Hr, weekdays), mean)))
with(tr, aggregate(count, by=list(Hr, weekdays), mean))
plot(with(tr, aggregate(count, by=list(Hr, weekdays), mean)))
s <- plot(with(tr, aggregate(count, by=list(Hr, weekdays), mean)))
s <- with(tr, aggregate(count, by=list(Hr, weekdays), mean))
plot(s.Grounp.1)
plot(s$Grounp.1)
View(s)
plot(s$x~s$Grounp.1, col=s$Group.2)
View(s)
plot(s$Grounp.1, s$x, col=s$Group.2)
barplot(s$Grounp.1, s$x, col=s$Group.2)
s$Group.1 <- as.factor(s$Group.1)
s$Group.2 <- as.factor(s$Group.2)
barplot(s$Grounp.1, s$x, col=s$Group.2)
barplot(s$x, s$Grounp.1, col=s$Group.2)
plot(s$x, s$Grounp.1, col=s$Group.2)
View(s)
modFit <- train(count~., method='rpart', data=sub_set) # not yet preProcessed
plot(s$Grounp.1~s$x, col=s$Group.2)
plot(s$x~s$Grounp.1, col=s$Group.2)
plot(s$x, col=s$Group.2)
?plot
s <- tr, aggregate(count, by=list(Hr, weekdays), mean))
s <- with(tr, aggregate(count, by=list(Hr, weekdays), mean))
as.numeric(s$Group.1)
s$Group.1 <- as.numeric(s$Group.1)
plot(s$Group.1, s$x, col=s$Group.2)
legend("topright", pch = 1, col = s$Group.2, legend = s$Group.1)
plot(s$Group.1, s$x, col=s$Group.2)
legend("topright", pch = 19, col = s$Group.2, legend = s$Group.1)
legend("top", pch = 19, col = s$Group.2, legend = s$Group.1)
plot(s$Group.1, s$x, col=s$Group.2)
plot(s$Group.1, jitter(s$x), col=s$Group.2)
?qplot
qplot(Group.1, jitter(x), data = s, color = Group.2)
library(ggplot2)
qplot(Group.1, jitter(x), data = s, color = Group.2)
qplot(Group.1, jitter(x), data = s, color = Group.2, type = "l")
?qplot
qplot(Group.1, jitter(x), data = s, color = Group.2, size = 4)
q <- qplot(Group.1, jitter(x), data = s, color = Group.2, size = 4)
q + geom_point(aes(colour = Set1))
qplot(Group.1, jitter(x), data = s, color = Group.2, size = 4)
summary(tr$season)
smallset <- tr[,2:11]
rotate <- prcomp(smallset)
plot(rotate$x[,1], rotate$x[,2])
rotate$rotation
M <- abs(cor(tr[,2:11]))
# # removing diagonal cor fac. since the self cor = 1
diag(M) <- 0
# # find out which variables are highly corelated with each other
which(M > 0.8, arr.ind=T)
M
View(M)
which(M > 0.4, arr.ind=T)
View(M)
smallset <- train_data[,c(6,7)]
rotate <- prcomp(smallset)
smallset <- tr[,c(6,7)]
rotate <- prcomp(smallset)
rotate$rotation
plot(rotate$x[,1], rotate$x[,2])
rotate
head(rotate$PC1)
rotate$rotation
rotate$rotation$PC1
rotate$rotation[1,1]
train_raw <- subset(tr, tr$new_window=="no")
train_raw <- train_raw[, c(2:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
M <- abs(cor(train_raw[7:58]))
diag(M) <- 0
View(train_raw)
train_raw <- subset(tr, tr$new_window=="no")
train_raw <- train_raw[, c(2:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
train_raw <- subset(tr, tr$new_window=="no")
tr <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
train_raw <- subset(tr, tr$new_window=="no")
train_raw <- train_raw[, c(2:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
M <- abs(cor(train_raw[7:58]))
diag(M) <- 0
dim(which(M > 0.9, arr.ind = T))
which(M > 0.9, arr.ind = T)
mF_rp <- train(train_raw$classe~., method = "rpart", data = train_raw)
library(caret)
library(randomForest)
library(rpart)
library(rattle)
mF_rp <- train(train_raw$classe~., method = "rpart", data = train_raw)
fancyRpartPlot(mF_rp$finalModel)
?fancyRpartPlot
mF_rp
names(train_raw)[16]
names(train_raw)[7]
names(train_raw)[c(7,10,15,16)]
names(train_raw)[c(8,14)]
names(train_raw)[c(24,25)]
names(train_raw)[c(37,39,52)]
table(train_raw$classe)
table(train_raw$classe, exclude=NULL)
?dummyVars
dummies <- dummyVars(classe~classe, data = train_raw)
dummies
fancyRpartPlot(mF_rp_tenFea$finalModel)
fancyRpartPlot(mF_rp$finalModel)
mF_rp <- train(train_raw$classe~., method = "rpart", data = train_raw)
fancyRpartPlot(mF_rp$finalModel)
train_raw <- train_raw[,7:59]
mF_rp <- train(train_raw$classe~., method = "rpart", data = train_raw)
fancyRpartPlot(mF_rp$finalModel)
fancyRpartPlot(mF_rp$finalModel)
names(train_raw)
which(M > 0.8, arr.ind = T)
names(train_raw)[,7:52]
names(train_raw)
train_euler <- train_raw[,c(7,8,9,14,15,16,27,28,29,40,41,42)]
install.packages("doSNOW")
library(doSNOW)
registerDoSNOW(makeCluster(2, type = "SOCK"))
?randomForest
train_euler <- train_raw[,c(7,8,9,14,15,16,27,28,29,40,41,42,53)]
inTrain <- createDataPartition(y=train_euler$classe, p = 0.6, list=F)
train_set <- train_raw[inTrain,]
cv_set <- train_raw[-inTrain,]
rF <- randomForest(train_set, y = train_set$classe, ntree=10)
rF
rF <- randomForest(train_set, y = train_set$classe, ntree=100)
rf
rF
rF_test <- randomForest(train_set, y = train_set$classe, xtest=cv_set, ytest=cv_set$classe, ntree=100)
rF_test
?predict
rF_test <- randomForest(train_set, y = train_set$classe, xtest=cv_set, ytest=cv_set$classe, ntree=500)
rF_test
te <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
pred <- predict(rF_test, te)
test_euler <- te[,c(7,8,9,14,15,16,27,28,29,40,41,42,53)]
pred <- predict(rF_test, test_euler)
?rfcv
mF_rp_euler <- train(train_set$classe~., method="rf", data = train_euler)
mF_rp_euler <- train(train_set$classe~., method="rf", data = train_set)
getTree(rF_test)
getTree(rF)
tr <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
train_raw <- subset(tr, tr$new_window=="no")
train_raw <- train_raw[, c(2:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
inTrain <- createDataPartition(y=train_raw$classe, p = 0.6, list=F)
trraw_set <- train_raw[inTrain,]
trraw_cv <- train_raw[-inTrain,]
set.seed(151)
inTrain <- createDataPartition(y=train_raw$classe, p = 0.6, list=F)
trraw_set <- train_raw[inTrain,]
trraw_cv <- train_raw[-inTrain,]
rFraw <- randomForest(trraw_set, y = trraw_set$classe, ntree=500)
rFraw <- randomForest(trraw_set, y = trraw_set$classe, ntree=10)
rFraw
rFraw_test <- randomForest(trraw_set, y = trraw_set$classe, xtest=trraw_cv, ytest=trraw_cv$classe, ntree=100)
rFraw_test
test_raw <- te[, c(2:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
te <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
test_raw <- te[, c(2:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
predRaw <- predict(rFraw, test_raw)
rFraw_test <- randomForest(trraw_set, y = trraw_set$classe, xtest=test_raw, ntree=100)
rFraw_test
rFraw <- randomForest(trraw_set, y = trraw_set$classe, ntree=2000)
rFraw
predRaw <- predict(rFraw, test_raw)
rFraw <- randomForest(trraw_set[,7:58], y = trraw_set$classe, ntree=2000)
rFraw
predRaw <- predict(rFraw, test_raw[,7:58])
predRaw
predCv <- predict(rFraw, trraw_cv[,7:58])
trraw_cv$predRight <- predCv==trraw_cv$classe
table(predCv,trraw_cv$classe)
source('~/.active-rstudio-document', echo=TRUE)
table(predCv, tr_cv$classe)
rFraw_test <- randomForest(tr_set, y = tr_set$classe, xtest=tr_cv, ytest=tr_cv$classe, ntree=2000)
rFraw_test <- randomForest(tr_set[,7:58], y = tr_set$classe, xtest=tr_cv[,7:58], ytest=tr_cv$classe, ntree=2000)
rFraw_test
predRaw1 <- predict(rFraw_est, test_raw[,7:58])
predRaw1 <- predict(rFraw_test, test_raw[,7:58])
?trainControl()
rFraw_test500 <- randomForest(tr_set[,7:58], y = tr_set$classe, xtest=tr_cv[,7:58], ytest=tr_cv$classe, ntree=500)
rFraw_test500
rFraw_test1000 <- randomForest(tr_set[,7:58], y = tr_set$classe, xtest=tr_cv[,7:58], ytest=tr_cv$classe, ntree=1000)
rFraw_test1000
rFraw_test100 <- randomForest(tr_set[,7:58], y = tr_set$classe, xtest=tr_cv[,7:58], ytest=tr_cv$classe, ntree=100)
rFraw_test100
varUsed(rFraw)
plot(nFraw)
plot(rFraw)
plot(rFraw)
rFraw <- randomForest(tr_set[,7:58], y = tr_set$classe, xtest=tr_cv[,7:58], ytest=tr_cv$classe, ntree=1000, keep.forest=T)
View(test_raw)
predRaw <- predict(rFraw, test_raw[,7:58])
predRaw
rFraw
str(rFraw)
rFraw$confusion
rFraw
rFraw <- randomForest(tr_set[,7:58], y = tr_set$classe, xtest=tr_cv[,7:58], ytest=tr_cv$classe, ntree=1000, keep.forest=T, inportance=T)
rFraw
plot(rFraw)
plot(rFraw)
predRaw
?read.csv
setwd("D:/Data Analysis/R/ML/Pj-dumbell")
dim(tr)[2]
